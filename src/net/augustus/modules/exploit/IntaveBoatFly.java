package net.augustus.modules.exploit;

import lombok.Getter;
import net.augustus.events.EventTick;
import net.augustus.events.EventUpdate;
import net.augustus.events.EventWorld;
import net.augustus.modules.Categorys;
import net.augustus.modules.Module;
import net.augustus.modules.world.Eagle;
import net.augustus.settings.BooleanValue;
import net.augustus.settings.DoubleValue;
import net.augustus.utils.skid.gotaj.InventoryUtils;
import net.augustus.utils.skid.gotaj.Timer;
import net.augustus.utils.skid.vestige.LogUtil;
import net.augustus.utils.skid.xylitol.PacketUtil;
import net.lenni0451.eventapi.reflection.EventTarget;
import net.minecraft.block.BlockAir;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemSword;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.ChatComponentText;

import java.awt.*;


public class IntaveBoatFly extends Module {
    public DoubleValue range = new DoubleValue(15320, "Range", this, 3.0, 1.0, 6.0, 1);
    public BooleanValue useTool = new BooleanValue(14776, "UseSword", this, true);
    public BooleanValue autoFly = new BooleanValue(11822, "AutoFly", this, true);
    public BooleanValue autoDis = new BooleanValue(149,"AutoDisable",this,true);
    public BooleanValue debug = new BooleanValue(8204,"Debug",this,true);
    @Getter
    public Entity target;
    public net.augustus.utils.skid.gotaj.Timer timer = new Timer();

    public int ticks = 0;
    public boolean flyed = false;


    public IntaveBoatFly() {
        super("IntaveBoatFly", new Color(255, 255, 255), Categorys.EXPLOIT);
    }

    public void resetAll() {
        target = null;

        flyed = false;
        ticks = 0;
    }

    @Override
    public void onEnable() {
        super.onEnable();
        resetAll();
    }

    @Override
    public void onDisable() {
        super.onDisable();
        resetAll();
    }

    @EventTarget
    public void onEventWorld(EventWorld eventWorld) {
        resetAll();
    }
    @EventTarget
    public void onEventTick(EventTick eventTick) {
        if (mc.thePlayer.inventory.getCurrentItem() == null && target != null) {
            LogUtil.addChatMessage("§F[§6IntaveBoatFly§F]§F Try to Switch a Slot..?§f.");
        }
        if (flyed && (Eagle.getBlockUnderPlayer(mc.thePlayer) instanceof BlockAir) && mc.thePlayer.ridingEntity == null) {
            if (autoDis.getBoolean()) {
                this.setToggled(false);
                LogUtil.addChatMessage("§F[§6IntaveBoatFly§F]§F[§5AutoDisable§F]§4 Disabled!§f.");
            }
            ticks ++;
        }
        else if (!flyed) {
            ticks = 0;
        }
    }
    @EventTarget
    public void onUpdate(EventUpdate eventUpdate) {

        if (mc.thePlayer != null && mc.theWorld != null && mc.thePlayer.ridingEntity != null) {
                Entity entity = mc.thePlayer.ridingEntity;
                if (entity instanceof EntityBoat) {
                    target = entity;
                }
                else {
                    target = null;
                }

        }
        else {
            target = null;
        }

        if (target != null) {


            if (useTool.getBoolean()) {
                doSwitch();
            }
            mc.thePlayer.sendQueue.addToSendQueue(new C02PacketUseEntity(target, C02PacketUseEntity.Action.ATTACK));
            if (debug.getBoolean()) {
                LogUtil.addChatMessage("§F[§6IntaveBoatFly§F]§F[§5Debug§F]§4 Attacked the Boat§f.");
            }
            if (!flyed && autoFly.getBoolean()) {
                fly();
            }

        }

        if (flyed) {
            if (mc.thePlayer != null && (!(Eagle.getBlockUnderPlayer(mc.thePlayer) instanceof BlockAir)) && ticks > 5 && mc.thePlayer.ridingEntity == null) {
                if (debug.getBoolean()) {
                    LogUtil.addChatMessage("§F[§6IntaveBoatFly§F]§F[§5Debug§F]§2 OnGround ! Reseted.");
                }
                flyed = false;
            }
        }

    }
    public void fly() {
        if (mc.isSingleplayer()) {
            mc.ingameGUI.getChatGUI().printChatMessage(new ChatComponentText("§F[§6IntaveBoatFly§F]§F[§5Anti§4LIQ§F] Do §4NOT§F Use Flag Mode Fly in SinglePlayer ! It will Cause your game to §4CRASH §F!"));
            return;
        }
        float flagmotionjump;
        float flagmotionsneak;
        if (mc.gameSettings.keyBindJump.isKeyDown()) {
            flagmotionjump = 1.5624f;
        } else {
            flagmotionjump = 0.00000001f;
        }
        if (mc.gameSettings.keyBindSneak.isKeyDown()) {
            flagmotionsneak = 0.0624f;
        } else {
            flagmotionsneak = 0.00000002f;
        }



        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX + mc.thePlayer.motionX * 999, mc.thePlayer.posY + flagmotionjump - flagmotionsneak, mc.thePlayer.posZ + mc.thePlayer.motionZ * 999, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX + mc.thePlayer.motionX * 999, mc.thePlayer.posY - 6969, mc.thePlayer.posZ + mc.thePlayer.motionZ * 999, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
        mc.thePlayer.setPosition(mc.thePlayer.posX + mc.thePlayer.motionX * 11, mc.thePlayer.posY, mc.thePlayer.posZ + mc.thePlayer.motionZ * 11);
        mc.thePlayer.motionY = 0.0;
        if (debug.getBoolean()) {
            LogUtil.addChatMessage("§F[§6IntaveBoatFly§F]§F[§5Debug§F]§c Flying...");
        }
        flyed = true;
    }


    public void doSwitch() {
        for (int i = 36; i < 45; i++) {


            if (mc.thePlayer.inventoryContainer.getSlot(i).getStack() != null && mc.thePlayer.inventoryContainer.getSlot(i).getStack() == bestWeapon() && mc.thePlayer.inventory.currentItem != i - 36) {
                if (mc.thePlayer.inventory.currentItem != i - 36 || mc.thePlayer.inventory.getCurrentItem() == null) mc.thePlayer.inventory.currentItem = i - 36;
                if (debug.getBoolean()) {
                    LogUtil.addChatMessage("§F[§6IntaveBoatFly§F]§F[§5Debug§F] Switched to Tool.");
                }
                InventoryUtils.timer.reset();
                break;
            }

        }


    }








    public ItemStack bestWeapon() {
        ItemStack bestWeapon = null;
        float itemDamage = -1;

        for (int i = 36; i < 45; i++) {
            if (mc.thePlayer.inventoryContainer.getSlot(i).getHasStack()) {
                final ItemStack is = mc.thePlayer.inventoryContainer.getSlot(i).getStack();

                if (is.getItem() instanceof ItemSword || is.getItem() instanceof ItemAxe || is.getItem() instanceof ItemPickaxe) {
                    float toolDamage = getItemDamage(is);

                    if (toolDamage >= itemDamage) {
                        itemDamage = getItemDamage(is);
                        bestWeapon = is;
                    }
                }
            }
        }

        return bestWeapon;
    }

    public float getItemDamage(ItemStack itemStack) {
        float damage = InventoryUtils.getToolMaterialRating(itemStack, true);
        damage += EnchantmentHelper.getEnchantmentLevel(Enchantment.sharpness.effectId, itemStack) * 1.25F;
        damage += EnchantmentHelper.getEnchantmentLevel(Enchantment.fireAspect.effectId, itemStack) * 0.50F;
        damage += EnchantmentHelper.getEnchantmentLevel(Enchantment.unbreaking.effectId, itemStack) * 0.01F;
        damage += (itemStack.getMaxDamage() - itemStack.getItemDamage()) * 0.000000000001F;

        if (itemStack.getItem() instanceof ItemSword) {
            damage += 0.2F;
        }

        return damage;
    }

}
