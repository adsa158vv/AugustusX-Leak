package net.augustus.modules.exploit;

import io.netty.buffer.Unpooled;
import net.augustus.events.*;
import net.augustus.modules.Categorys;
import net.augustus.modules.Module;
import net.augustus.settings.BooleanValue;
import net.augustus.settings.DoubleValue;
import net.augustus.utils.RandomUtil;
import net.augustus.utils.custompackets.CustomC00PacketKeepAlive;
import net.lenni0451.eventapi.reflection.EventTarget;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.util.ChatComponentText;

import java.awt.*;
import java.util.ArrayList;

public class Disabler extends Module {




    private final ArrayList<CustomC00PacketKeepAlive> keepAlivePackets = new ArrayList<>();

    int lastSlot;
    boolean lastSprinting;


    public BooleanValue pingSpoof = new BooleanValue(2587, "PingSpoof", this, false);
    public BooleanValue royalPixels = new BooleanValue(5135, "RoyalPixels", this, false);
    public BooleanValue minemenStrafe = new BooleanValue(15324, "MinemenStrafe", this, false);
    public BooleanValue universoCraft = new BooleanValue(3309, "UniversoCraft", this, false);
    public BooleanValue spectate = new BooleanValue(15391, "Spectate", this, false);
    public BooleanValue keepAlive = new BooleanValue(10080, "C00PacketKeepAlive", this, false);
    public BooleanValue ping = new BooleanValue(9086, "C01PacketPing", this, false);
    public BooleanValue entityAction = new BooleanValue(7597, "C0BPacketEntityAction", this, false);
    public BooleanValue playerAbilities = new BooleanValue(10252, "C13PacketPlayerAbilities", this, false);
    public BooleanValue c0f = new BooleanValue(4220, "C0FPacketConfirmTransaction", this, false);
    public BooleanValue s32 = new BooleanValue(5188,"S32PacketConfirmTransaction",this,false);
    public BooleanValue c03 = new BooleanValue(4866,"C03PacketPlayer",this,false);
    public BooleanValue ncpTimer = new BooleanValue(5827, "NCPTimerSemi", this, false);
    //public BooleanValue vulcanStrafe = new BooleanValue(10503, "VulcanStrafe", this, false);
    //public BooleanValue vulcanCombat = new BooleanValue(14919, "VulcanAutoclicker", this, false);
    //public BooleanValue spamSprint = new BooleanValue(6887, "SpamSprint", this, false);
    public BooleanValue hac = new BooleanValue(16171, "HAC", this, false);
    public BooleanValue grimba = new BooleanValue(11207, "GrimBadPacketA", this, true);
    public BooleanValue grimbf = new BooleanValue(7179, "GrimBadPacketF", this, true);
    //public BooleanValue grimpost2pre = new BooleanValue(13505,"GrimPost2Pre",this,false);
    public BooleanValue grimplace = new BooleanValue(8210,"GrimPlace",this,false);

    public BooleanValue noSprint = new BooleanValue(15374, "NoSprint", this, false);
    public BooleanValue blcSpoof = new BooleanValue(12923, "BLC-Spoof", this, false);
    public BooleanValue aac5 = new BooleanValue(14237, "AAC5", this, false);
    public BooleanValue antiVanillaEumel = new BooleanValue(15329, "NoFlag", this, false);
    private final BooleanValue debug = new BooleanValue(13387, "Debug", this, false);

    public DoubleValue delay = new DoubleValue(9565, "Delay", this, 1000.0, 1.0, 4000.0, 0);
    public BooleanValue onWorld = new BooleanValue(12490, "DisableOnWorld", this, false);
    @EventTarget
    public void onWorld(EventWorld eventWorld) {
        if(onWorld.getBoolean()) {
            setToggled(false);
            this.lastSlot= -1;
            this.lastSprinting = false;

        }
    }
    private boolean disabling;
    private Packet thepacket;
    private boolean shouldcancel = false;
    private final ArrayList<Packet> blockpackets = new ArrayList<>();


    public Disabler() {
        super("Disabler", new Color(73, 127, 163), Categorys.EXPLOIT);
    }

    @Override
    public void onEnable() {
        super.onEnable();
        shouldcancel = false;
        this.keepAlivePackets.clear();
        this.blockpackets.clear();
    }

    @Override
    public void onDisable() {
        super.onDisable();
        shouldcancel = false;
        if (!this.keepAlivePackets.isEmpty()) {
            this.keepAlivePackets.clear();
        }
        this.blockpackets.clear();
    }



    @EventTarget
    public void onEventUpdate(EventUpdate eventUpdate) {
            if (ncpTimer.getBoolean()) {
                mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - 0.017, mc.thePlayer.posZ);
                mc.thePlayer.motionY = 0.019;
            }
            if (hac.getBoolean()) {
                if (mc.thePlayer.ticksExisted % 10 == 0) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - 11, mc.thePlayer.posZ, mc.thePlayer.cameraYaw, mc.thePlayer.cameraPitch, true));
                }
            }
            if (aac5.getBoolean()) {
                if (!mc.isIntegratedServerRunning()) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - 1.0E159, mc.thePlayer.posZ + 10, 0, 0, true));
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, 0, 0, true));
                }
            }
            if (this.royalPixels.getBoolean()) {
                C13PacketPlayerAbilities capabilities = new C13PacketPlayerAbilities();
                capabilities.setAllowFlying(true);
                capabilities.setFlying(true);
                mc.thePlayer.sendQueue.addToSendQueue(capabilities);
            }

    }

    @EventTarget
    public void onEventRender3D(EventRender3D eventRender3D) {
        if (this.pingSpoof.getBoolean() && mc.thePlayer != null && !this.keepAlivePackets.isEmpty()) {
            ArrayList<CustomC00PacketKeepAlive> toRemove = new ArrayList<>();

            for(CustomC00PacketKeepAlive packet : this.keepAlivePackets) {
                if (packet.getTime() < System.currentTimeMillis()) {
                    mc.thePlayer.sendQueue.addToSendQueueDirect(new C00PacketKeepAlive(packet.getKey()));
                    toRemove.add(packet);
                }
            }

            this.keepAlivePackets.removeIf(toRemove::contains);
        }
    }

    @EventTarget
    public void onEventPreMotion(EventPreMotion eventPreMotion) {

        if (blockpackets != null) {
            resetPackets();
        }
    }
    @EventTarget
    public void onEventPostMotion(EventPostMotion eventPostMotion) {
        if (thepacket instanceof C0EPacketClickWindow) {

                this.blockpackets.add(thepacket);
                shouldcancel = true;

        }
        if (thepacket instanceof C0BPacketEntityAction) {
            this.blockpackets.add(thepacket);
            shouldcancel = true;
        }
        if (thepacket instanceof C08PacketPlayerBlockPlacement) {
            this.blockpackets.add(thepacket);
            shouldcancel = true;
        }
    }

    private void resetPackets() {
        try {
            this.blockpackets.forEach(mc.thePlayer.sendQueue::addToSendQueueDirect);
        } catch (NullPointerException ignored) {} catch (Exception var2) {
            System.err.println("Error in Converting Post Packets to Pre.");
        }

        this.blockpackets.clear();
    }
    @EventTarget
    public void onEventSendPacket(EventSendPacket eventSendPacket) {
        thepacket = eventSendPacket.getPacket();


            if (mc.thePlayer != null && !mc.thePlayer.isDead) {
                //If player is dead or invaid, cancelled.
                if (grimbf.getBoolean()) {
                    if (thepacket instanceof C0BPacketEntityAction) {
                        if (((C0BPacketEntityAction) thepacket).getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                            if (this.lastSprinting) {
                                eventSendPacket.setCancelled(true);
                            }
                            this.lastSprinting = true;
                        } else if (((C0BPacketEntityAction) thepacket).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                            if (!this.lastSprinting) {
                                eventSendPacket.setCancelled(true);
                            }
                            this.lastSprinting = false;
                        }
                    }
                }
                //BadPacketF Disabler.
                if (grimba.getBoolean()) {
                    if (thepacket instanceof C09PacketHeldItemChange) {
                        final int slot = ((C09PacketHeldItemChange) thepacket).getSlotId();
                        if (slot == this.lastSlot && slot != -1) {
                            eventSendPacket.setCancelled(true);
                        }
                        this.lastSlot = ((C09PacketHeldItemChange) thepacket).getSlotId();
                    }
                }
                //BadPacketA Disabler.

            }

        if (this.universoCraft.getBoolean()) {
            if (thepacket instanceof S07PacketRespawn) {
                this.disabling = true;
            } else if (thepacket instanceof C02PacketUseEntity) {
                this.disabling = false;
            } else if (thepacket instanceof C03PacketPlayer && mc.thePlayer.ticksExisted <= 10) {
                this.disabling = true;
            } else if (thepacket instanceof C0FPacketConfirmTransaction && this.disabling && mc.thePlayer.ticksExisted < 350) {
                ((C0FPacketConfirmTransaction)thepacket).setUid((mc.thePlayer.ticksExisted % 2 == 0) ? Short.MIN_VALUE : Short.MAX_VALUE);
            }
        }
        if (this.noSprint.getBoolean() && thepacket instanceof C0BPacketEntityAction) {
            if(((C0BPacketEntityAction)thepacket).getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                eventSendPacket.setCancelled(true);
            }
        }
        if (this.pingSpoof.getBoolean() && thepacket instanceof C00PacketKeepAlive) {
            C00PacketKeepAlive c00PacketKeepAlive = (C00PacketKeepAlive)thepacket;
            this.keepAlivePackets
                    .add(
                            new CustomC00PacketKeepAlive(
                                    c00PacketKeepAlive.getKey(), (long)((double)System.currentTimeMillis() + this.delay.getValue() + (double)RandomUtil.nextLong(0L, 200L))
                            )
                    );
            eventSendPacket.setCancelled(true);
        }

        if (this.minemenStrafe.getBoolean() && thepacket instanceof C0FPacketConfirmTransaction && mc.thePlayer.ticksExisted % 3 == 0) {
            eventSendPacket.setCancelled(true);
        }

        if (thepacket instanceof C00PacketKeepAlive && this.keepAlive.getBoolean()) {
            eventSendPacket.setCancelled(true);
        }

        if (thepacket instanceof C01PacketPing && this.ping.getBoolean()) {
            eventSendPacket.setCancelled(true);
        }

        if (thepacket instanceof C0BPacketEntityAction && this.entityAction.getBoolean()) {
            eventSendPacket.setCancelled(true);
        }

        if (thepacket instanceof C13PacketPlayerAbilities && this.playerAbilities.getBoolean()) {
            eventSendPacket.setCancelled(true);
        }

        if (thepacket instanceof C0FPacketConfirmTransaction && this.c0f.getBoolean()) {
            if (this.debug.getBoolean())mc.ingameGUI.getChatGUI().printChatMessage(new ChatComponentText("§F[§6Disabler§F]§F[§5Debug§F] C0F Cancelled."));
            eventSendPacket.setCancelled(true);
        }
        if (thepacket instanceof C03PacketPlayer && this.c03.getBoolean()) {
            eventSendPacket.setCancelled(true);
        }

        if (thepacket instanceof C03PacketPlayer && this.spectate.getBoolean()) {
            if (this.debug.getBoolean())mc.ingameGUI.getChatGUI().printChatMessage(new ChatComponentText("§F[§6Disabler§F]§F[§5Debug§F] Spectate Packet Send."));
            mc.thePlayer.sendQueue.addToSendQueue(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
        }

        if (thepacket instanceof C17PacketCustomPayload && this.blcSpoof.getBoolean()) {
            final C17PacketCustomPayload c17 = (C17PacketCustomPayload) eventSendPacket.getPacket();
            if (c17.getChannelName().equals("MC|Brand")) {
                eventSendPacket.setPacket(new C17PacketCustomPayload(c17.getChannelName(), new PacketBuffer(Unpooled.buffer()).writeString("blc")));
            }
        }
    }
    @EventTarget
    public void onRecv(EventReadPacket event) {
        if(antiVanillaEumel.getBoolean()) {
            if (event.getPacket() instanceof S08PacketPlayerPosLook && mc.thePlayer.ticksExisted > 20) {
                //PlayerUtil.sendChat("Sexed: " + mc.thePlayer.ticksExisted);
                double x = ((S08PacketPlayerPosLook) event.getPacket()).getX() - mc.thePlayer.posX;
                double y = ((S08PacketPlayerPosLook) event.getPacket()).getY() - mc.thePlayer.posY;
                double z = ((S08PacketPlayerPosLook) event.getPacket()).getZ() - mc.thePlayer.posZ;
                double diff = Math.sqrt(x * x + y * y + z * z);
                if (diff <= 8.0D) {

                    event.setCancelled(true);
                    mc.thePlayer.sendQueue.addToSendQueueDirect(new C03PacketPlayer.C06PacketPlayerPosLook(((S08PacketPlayerPosLook) event.getPacket()).getX(), ((S08PacketPlayerPosLook) event.getPacket()).getY(), ((S08PacketPlayerPosLook) event.getPacket()).getZ(), ((S08PacketPlayerPosLook) event.getPacket()).getYaw(), ((S08PacketPlayerPosLook) event.getPacket()).getPitch(), true));
                    //Client.INSTANCE.getNotificationManager().postNotification("Silent Flag!", NotificationType.INFO);
                }
            }
        }
        event.setCancelled((thepacket instanceof S32PacketConfirmTransaction && this.s32.getBoolean()));
    }



}

